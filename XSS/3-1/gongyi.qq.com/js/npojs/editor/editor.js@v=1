var Gy_Editor_qzCSSPath = "http://gongyi.qq.com/css/npocss/qzCSS.css";
//var Gy_Editor_ImagesPath = "http://gongyi.qq.com/images/npoimages/editor/";by junhaiguo 20120515
var Gy_Editor_ImagesPath = "http://mat1.gtimg.com/gongyi/npoimages/editor";
var Gy_Editor_blankPath = "http://gongyi.qq.com/qzeditor/blank.htm";
var Gy_Editor_promptDialogPath = "http://gongyi.qq.com/qzeditor/promptDialog.htm";


var fontSizeMap = {1:"10px", 2:"13px", 3:"16px", 4:"18px", 5:"24px", 6:"32px"};
function popupDialog(title, html, width, height) {
	createTipwin('popUpMain', html, width, 0, title, null, closePopup);
}
function closePopup() {
	if (top.popupCallback) top.popupCallback();
	top.popupCallback = null;
	FunsetModal();
	Fid('popUpMain').style.display = 'none';
}
function showMsgbox() {
	showInfoWin(arguments[0]);
}
function hideMsgbox() {
	hiddenInfoWin();
}
var editorHash = [];
var _commandStates = ["bold", "italic", "underline", "JustifyLeft", "JustifyCenter", "JustifyRight"];
var _fontFamliy = "仿宋_GB2312;黑体;楷体_GB2312;宋体;新宋体;Tahoma;Arial;Impact;Verdana";
var _fontSize = "1/六号;2/五号;3/四号;4/三号;5/二号;6/一号";
var _fontCount = 10 * 1000;//字数限制
var _textPaste = false;
var _editorPath = "http://"+jsImgcacheDomain+"/blog/";
var _multiPhotoSelect = false;
var _multiHrefSelect = false;
var _htmlMode = false;
var _defaultFontSize = "14px"; //默认字体大小
var _autoIndent = false;
var _autoFocus = false;
var _editorType ='HTML';//默认打开保存html格式的数据 当保存ubb格式 则值为"UBB"

var QZEditor = function(id, containID) {
	this.disableImg = false; // 禁用图片
	this.enableMusic = false;
	this.builded = false;
	this.id = id;
	this.containID = containID;
	this.width = "100%";
	this.height = "160";
	this.tbID = "editorTable_" + id; //容器表格
	this.tID = "qToolbar_" + id; //工具栏
	this.eID = "qEditor_" + id; //编辑框
	this.bID = "qTab_" + id; //
	this.sID = "qState_" + id; //状态栏
	this.rID = "qResize_" + id;
	this.zoomArea = true;
	this.arrDlgInfo = new Array(); //?
};

QZEditor.prototype.build = function() {
	if (this.builded) return;
	var containDom = Fid(this.containID);
	containDom.innerHTML = '<table id="' + this.tbID + '" cellspacing="0" class="qzEditor" style="width:'+((this.width+'').indexOf("%")>0 ? this.width : (this.width+'px'))+';"><tr><td id="' + this.tID + '" class="qzEditorTool"></td></tr><tr><td style="height:2px;"></td></tr><tr><td><div id="' + this.sID + '" class="qzTips"></div></td></tr><tr><td id="' + this.eID + '" class="qzEditorArea"></td></tr>' + (this.zoomArea == true ? '<tr><td><div class="resize_bar" id="'+this.rID+'"><span>重设大小</span></div></td></tr>': '') + '</table>';

	if(parseInt(containDom.scrollHeight-containDom.offsetHeight)>10){
		this.height = containDom.offsetHeight;
		Fid(this.tbID).style.height = this.height+'px';
		heightstr = this.height + (/^\d+$/.test(this.height + '') ? "px": "");
	}
	// 只有IE支持
	this.enableMusic = !FBrowser.isIE ? false : this.enableMusic;
	this.toolBar = new QZEditorToolbar(this.id, _ubbToolbar, _wysiwygToolbar, { disableImg : this.disableImg, enableMusic : this.enableMusic });
	this.editorArea = new QZEditorArea(this.id, { disableImg : this.disableImg, enableMusic : this.enableMusic });
	this.editorArea.UBBFrame.style.height = this.height+"px";
	this.editorArea.IFrame.style.height = this.height+"px";
	this.builded = true;

	Fid(this.rID).editorID = this.id;
	FaddEvent(Fid(this.rID), "mousedown", qzResizeStart);
};
QZEditor.prototype.getUBB = function() {
	if (this.editorArea.editMode == 1) {
		return this.editorArea.filterImage(this.editorArea.HTML2UBB(this.editorArea.getHTML()), true);
	} else {
		return this.editorArea.filterImage(this.editorArea.UBBFrame.value, true);
	}
};
QZEditor.prototype.getHTML = function() {
	if (this.editorArea.editMode == 1) {
		return this.editorArea.getHTML();
	} else {	
		return this.editorArea.UBB2HTML(this.editorArea.UBBFrame.value);
	}
};
QZEditor.prototype.callback = function() {
	if (!this.builded) return;
	this.editorArea.callback();
	if(typeof this.onfocus == 'function') {
		FaddEvent(this.editorArea.UBBFrame, 'focus', this.onfocus);
		FaddEvent(this.editorArea.IFrame.contentWindow, 'focus', this.onfocus);
	}
	if(typeof this.optCallback == 'function') this.optCallback();
};
QZEditor.prototype.unload = function() {
	this.editorArea.IFrame.src = "about:blank";
	this.editorArea = null;
	this.toolBar = null;
	var p = Fid(this.containID).childNodes[0];
	clearTimeout(window.cIDOm);
	clearTimeout(window.historyTimeout);
	p.parentNode.removeChild(p);
	editorHash[this.id] = null;
};
QZEditor.prototype.msgbox = function(msg, closeAble) {
	var tipsDiv = Fid(this.sID);
	tipsDiv.style.display = "block";
	tipsDiv.innerHTML = msg ? msg: "";
	if (closeAble) {
		var img = document.createElement("img");
		img.src = Gy_Editor_ImagesPath + '/close.gif';
		img.style.cssText = "float:right;cursor:pointer;margin-top:2px;margin-right:3px;";
		img.alt = "隐藏";
		img.sID = this.sID;
		img.id = this.id;
		FaddEvent(img, "mousedown", closeMsgbox);
		tipsDiv.insertBefore(img, tipsDiv.firstChild);
	}
	this.refreshDefinePanelPos();
};
QZEditor.prototype.hiddenMsgbox = function(msg) {
	var tipsDiv = Fid(this.sID);
	tipsDiv.style.display = "none";
	tipsDiv.innerHTML = "";
	this.refreshDefinePanelPos();
};

QZEditor.prototype.showDefinePanel = function(dlgID, dlgClassName, strHtml, width) {
	var dl = Fid(dlgID);
	if (!dl) {
		dl = document.createElement("div");
		dl.className = dlgClassName;
		dl.id = dlgID;
		document.body.appendChild(dl);
	}
	if ( !! window.editorContainerDom) window.editorContainerDom.appendChild(dl);
	var pos = FgetPostion(Fid(this.sID).parentNode);
	dl.style.top = pos.y + pos.height + 2 + "px";
	pos = getPosition(Fid(this.tID));
	dl.style.left = pos.x + Fid(this.tID).offsetWidth - width + "px";
	dl.innerHTML = strHtml;
	dl.style.display = "";
	this.arrDlgInfo[dlgID] = new Object();
	this.arrDlgInfo[dlgID].className = dlgClassName;
	this.arrDlgInfo[dlgID].innerHtml = strHtml;
	this.arrDlgInfo[dlgID].width = width;
};
QZEditor.prototype.refreshDefinePanelPos = function() {
	for (var index in this.arrDlgInfo) {
		if ( !! this.arrDlgInfo[index]) this.showDefinePanel(index, this.arrDlgInfo[index].className, this.arrDlgInfo[index].innerHtml, this.arrDlgInfo[index].width);
	}
};
QZEditor.prototype.hideDefinePanel = function(dlgID) {
	var dl = Fid(dlgID);
	if (dl) {
		dl.style.display = "none";
	}
	if ( !! this.arrDlgInfo[dlgID]) {
		delete this.arrDlgInfo[dlgID];
		this.arrDlgInfo[dlgID] = null;
	}
};

QZEditor.prototype.showMask = function(msg) {
	var maskDiv = document.getElementById("editorMaskDiv");
	var tb = document.getElementById(this.tbID);
	var tbP = FgetPostion(tb);
	if (!maskDiv) {
		maskDiv = document.createElement("div");
		maskDiv.id = "editorMaskDiv";
		maskDiv.style.cssText = "background:#000;position:absolute;color:#fff;font-weight:bold;text-align:center;font-size:20px;filter:alpha(opacity=1);-moz-opacity:0.01;opacity:0.01";
		document.body.appendChild(maskDiv);
	}
	with(maskDiv) {
		style.display = "";
		style.left = tbP.x + 'px';
		style.top = tbP.y + 'px';
		style.width = tb.offsetWidth + 'px';
		style.height = tb.offsetHeight + 'px';
		innerHTML = msg;
	}
};
QZEditor.prototype.hiddenMask = function() {
	var maskDiv = document.getElementById("editorMaskDiv");
	if (maskDiv) maskDiv.style.display = "none";
};

function qzEditor_mousedown(evt) {
	try {
		if (FBrowser.isSafari || FBrowser.isChrome || (FBrowser.isOpera && !FBrowser.isIE)) {
			return;
		}
	} catch(err) {}
	evt = FgetEvent(evt);
	var se = FgetEventTarget(evt);
	var eDoc = se.ownerDocument;
	if (!window.qzIframePopupOpened) {
		if (window.hidePopDialog) hidePopDialog();
		else parent.hidePopDialog();
	}

	evt.returnValue = false;
	return false;
}
function qzEditor_mouseup(evt) {
	evt = FgetEvent(evt);
	var se = FgetEventTarget(evt);
	var eDoc = se.ownerDocument;
	getCommandState(eDoc.editorID);
	return false;
}
function qzEditor_scroll(evt) {
	hidePopDialog();
}

//黏贴
function qzEditor_paste(evt) {
	evt = FgetEvent(evt);
	var se = FgetEventTarget(evt);
	var eDoc = se.ownerDocument;
	var eID = eDoc.editorID;
	if (_textPaste) {
		evt.returnValue = false;
		var clipText = window.clipboardData.getData("Text");
		if (!clipText) return false;
		clipText = clipText.replace(/(?!^)\n(?!$)/g, "<br/>");
		editorHash[eDoc.editorID].editorArea.fillHTML(clipText);
		return false;
	}

	if (eID) {
		clearTimeout(window.cIDOm);
		window.cIDOm = setTimeout(function() {
										   
			//junhaiguo UBB数据黏贴的时候自动转html  让用户输入的就是实际保存的效果
			if(_editorType=="UBB")
			{
				var tmp_ubb=editorHash[eID].getUBB();
				editorHash[eDoc.editorID].editorArea.fillUBB(tmp_ubb);	
			}
			checkInvaildDom(eID);
		},
		100)
	}
}
function qzEditor_keydown(evt) {
	evt = FgetEvent(evt);
	var se = FgetEventTarget(evt);
	var eDoc = se.ownerDocument;
	var eA = editorHash[eDoc.editorID].editorArea;
	if (evt.keyCode == "8" && eDoc.selection && eDoc.selection.type == "Control") return false;
	if (evt.ctrlKey && evt.keyCode == "90") {
		eA.undo();
		return false;
	}
	if (evt.ctrlKey && evt.keyCode == "89") {
		eA.redo();
		return false;
	}
	if (eA.autoIndent && evt.keyCode == "9") {
		if (FBrowser.isIE) eA.fillHTML("　　");
		return false;
	}
}
function qzEditor_keyup(evt) {
	evt = FgetEvent(evt);
	var se = FgetEventTarget(evt);
	var eDoc = se.ownerDocument;
	if (evt.ctrlKey && /65/.test(evt.keyCode)) return;
	var eA = editorHash[eDoc.editorID].editorArea;
	if ((eDoc.body.innerHTML == "<P>&nbsp;</P>" || eDoc.body.innerHTML == "<P></P>") && FBrowser.isIE) {
		eDoc.body.innerHTML = "";
		var range = eDoc.body.createTextRange();
		range.collapse();
		range.select();
	}
	if (eA.autoIndent && evt.keyCode == "13" && !evt.shiftKey) {
		if (FBrowser.isIE) editorHash[eDoc.editorID].editorArea.fillHTML("<br/>　　");
		return false;
	}
	toCountFont(eDoc.editorID, "html");
	if (evt.keyCode != "13") getCommandState(eDoc.editorID);
	if (evt.ctrlKey && /(89|90)/.test(evt.keyCode)) {
		if (window.historyTimeout && evt.keyCode == 90) eA.writeHistory();
	} else {
		eA.saveHistory();
	}
}
function qzEditorUBB_keyup(evt) {
	evt = FgetEvent(evt);
	var TA = FgetEventTarget(evt);
	toCountFont(TA.editorID, "text");
}

var g_dragResize = null;
function qzResizeStart(e){
	if(drag && drag._curEle) return;
	e = FgetEvent(e);
	var h = FgetEventTarget(e);

	if(typeof h.editorID == undefined) return false;

	var nh = document.createElement('div');
	nh.editorID = h.editorID;
	var pos = FgetPostion(h);

	nh.style.position = 'absolute';
	nh.style.left = pos['x'] + 'px';
	nh.style.top = pos['y'] + 'px';
	nh.style.background = '#bbb';
	nh.style.height = h.offsetHeight + 'px';
	nh.style.width = h.offsetWidth + 'px';
	document.body.appendChild(nh);

	var p = pageSize.get();
	nh.ordY = pos['y'];

	nh._y = nh.offsetTop-e.clientY-p.scrollTop;

	g_dragResize = nh;
	editorHash[h.editorID].showMask('');

	FaddEvent(document, 'mousemove', qzResizeMoving);
	FaddEvent(document, 'mouseup', qzResizeStop);
	FaddEvent(nh, 'losecapture', qzResizeStop);
	FsetEventCapture(nh);

	FstopEventTransfer(e);
}

function qzResizeMoving(e){
	e = FgetEvent(e);
	if(g_dragResize == null) return false;
	var h = g_dragResize;

	var sp = pageSize.get();
	var sl = sp.scrollLeft;
	var st = sp.scrollTop;
	var y = h._y + e.clientY + st;
	y = Math.min(Math.max(y, st), sp.clientHeight - h.offsetHeight + st);

	h.style.top = y+'px';
	FstopEventTransfer(e);
}

function qzResizeStop(e){
	e = FgetEvent(e);
	if(g_dragResize == null) return false;
	var h = g_dragResize;

	FremoveEvent(document, 'mousemove', qzResizeMoving);
	FremoveEvent(document, 'mouseup', qzResizeStop);
	FremoveEvent(h, 'losecapture', qzResizeStop);
	FreleaseEventCapture(h);

	var pos = FgetPostion(h);

	if(typeof h.editorID != 'undefined' && editorHash[h.editorID]){
		editorHash[h.editorID].editorArea.changeHeight(editorHash[h.editorID].height - 0 + (pos['y']-h.ordY));
		editorHash[h.editorID].hiddenMask();
	}
	h.parentNode.removeChild(h);

	g_dragResize = null;
}

var QZEditorArea = function(id, opt) {
	this.opt = opt || {};
	this.disableImg = opt.disableImg ? true : false;
	this.enableMusic = opt.enableMusic ? true : false;
	this.target = Fid("qEditor_" + id);
	this.tabTarget = Fid("qTab_" + id);
	this.statusBar = Fid("qState_" + id);
	this.readyState = false;
	this.editorID = id;
	this.tabs = "UBB代码编辑模式;所见即所得模式";
	this.tabObject = [];
	this.state = {};
	this.editMode = 0;
	this.init("");
	this.html = "";
	this.history = {
		index: 0,
		saveData: []
	};
	this.fullEdited = false;
	this.autoIndent = false;
	this.bEmptyEditPaper = false;
};
QZEditorArea.prototype.init = function(html) {
	this.UBBFrame = document.createElement('textarea');
	this.IFrame = document.createElement('iframe');
	this.IFrame.frameBorder = "no";
	this.IFrame.id = "editor_frame";
	this.IFrame.src = Gy_Editor_blankPath + "#" + this.editorID;
	this.target.appendChild(this.UBBFrame);
	this.target.appendChild(this.IFrame);
	this.UBBFrame.style.display = this.IFrame.style.display = "none";
	this.UBBFrame.editorID = this.editorID.toString();
    this.switchMode(1);
};
QZEditorArea.prototype.insertStatus = function(key, value, width, title) {
	this.state[key] = document.createElement("div");
	this.state[key].className = "s_" + key;
	this.state[key].innerHTML = value;
	this.state[key].style.width = width;
	this.state[key].title = title;
	this.statusBar.appendChild(this.state[key]);
};
QZEditorArea.prototype.setStatus = function(key, value) {
	this.state[key].innerHTML = value;
};
QZEditorArea.prototype.findElementByName = function(tName) {
	var oNode = null;
	tName = tName.toUpperCase();
	try {
		if (!FBrowser.isIE) {
			var selection = this.frameWindow.getSelection();
			if ( !! selection && !!selection.getRangeAt) {
				var range = selection.getRangeAt(0);
				if (!range || !range.startContainer) return oNode;
				if (!range.startContainer.tagName && range.startContainer.nodeType == 3) {
					if ( !! range.startContainer.parentNode && range.startContainer.parentNode.tagName.toUpperCase() == tName) oNode = range.startContainer.parentNode;
				} else if (range.startContainer.tagName.toUpperCase() == tName) {
					oNode == range.startContainer;
				} else if (range.startContainer.tagName.toUpperCase() == "BODY") {
					oNode = range.startContainer.childNodes.item(range.startOffset);
					if (!oNode || !oNode.tagName || oNode.tagName.toUpperCase() != tName) oNode = null;
				}
			}
		} else {
			var redo = 10;
			oNode = this.getRangeDom();
			while (oNode && oNode.tagName.toUpperCase() != tName) {
				if (redo < 0) return null;
				oNode = oNode.parentNode;
				redo--;
			}
		}
	} catch(err) {
		oNode = null;
	}
	return oNode;
};
QZEditorArea.prototype.getDomPosition = function(dom) {
	var p = FgetPostion(this.IFrame);
	var oNode = dom ? dom: this.getRangeDom();
	if (!oNode) return null;
	var eP = FgetPostion(oNode);
	return {
		left: (p.x + eP.x - this.Document.body.scrollLeft),
		top: (p.y + eP.y - this.Document.body.scrollTop),
		width: p.width,
		height: p.height,
		frameLeft: p.x,
		frameTop: p.y
	}
};
QZEditorArea.prototype.getRangeDom = function() {
	var type = this.Document.selection.type;
	var range = this.Document.selection.createRange();
	var oNode = null;
	try {
		oNode = (type == "Control") ? range(0) : range.parentElement();
	} catch(e) {
		oNode = null;
	}
	return oNode;
};
QZEditorArea.prototype.popup = function(html, width, height, marginLeft, marginTop, sourceNode) {
	window.qzIframePopupOpened = true;
	var p = this.getDomPosition(sourceNode);
	var l = p.left + marginLeft;
	var t = p.top + marginTop;
	var dialog = showPopDialog(l, t);
	dialog.innerHTML = '<div style="width:' + width + ';height:' + height + ';padding:3px;line-height:120%">' + html + '</div>';
	with(dialog) {
		var fixLeft = parseInt(style.left),
		fixTop = parseInt(style.top);
		if (fixLeft + offsetWidth - p.frameLeft > p.width) fixLeft = p.width - offsetWidth + p.frameLeft - 20;
		if (fixTop + offsetHeight - p.frameTop > p.height) fixTop = p.top - offsetHeight - 2;
		if (fixTop < p.frameTop) fixTop = p.frameTop + 3;
		style.left = fixLeft + "px";
		style.top = fixTop + "px";
	}
	return dialog;
};
QZEditorArea.prototype.selectNode = function(node, type) {
	if (!node) return;
	this.Document.selection.empty();
	if (type == "control") {
		var range = this.Document.body.createControlRange();
		range.add(node);
		range.select();
	} else {
		var range = this.Document.selection.createRange();
		range.moveToElementText(node);
		range.select();
	}
	return range.text;
};
QZEditorArea.prototype.overWriteStatus = function() {
	var oW = document.queryCommandState("OverWrite");
	var o = Fid('overW_' + this.editorID);
	if (!oW) o.style.color = "#808080";
	else o.style.color = "#000";
};
QZEditorArea.prototype.tabClick = function(index) {
	if (typeof this.lastTab != "undefined") {
		this.tabObject[this.lastTab].className = "tOff";
	}
	var myToolbar = editorHash[this.editorID].toolBar;
	this.tabObject[index].className = "tOn";
	this.lastTab = index;
	switch (index) {
	case 0:
		this.switchMode(0);
		break;
	case 1:
		this.switchMode(1);
		break;
	}
};

QZEditorArea.prototype.switchMode = function(mode) {
	var myToolbar = editorHash[this.editorID].toolBar;
	if (mode == 0) {
		this.UBBFrame.style.display = "";
		this.IFrame.style.display = "none";
		this.editMode = 0;
		myToolbar.disHighLightAll();
		if (this.readyState) {
			this.UBBFrame.value = this.filterImage(this.HTML2UBB(this.getHTML()), true);
			myToolbar.buildToolBar(myToolbar.uToolbar);
		}
		this.autoIndent = false;
	} else {
		this.UBBFrame.style.display = "none";
		this.IFrame.style.display = "";
		this.editMode = 1;
		if (this.readyState) {
			this.Document.body.innerHTML = this.filterImage(this.UBB2HTML(this.UBBFrame.value, true));
			myToolbar.buildToolBar(myToolbar.wToolbar);
		}
	}
	var bUBB = Fid("b_" + this.editorID + "_ubb");
	if (!this.editMode && bUBB) bUBB.className = "on";
	this.focus();
};
QZEditorArea.prototype.callback = function() {
	this.frameWindow = this.IFrame.contentWindow;
	this.Document = this.frameWindow.document;
	this.Document.body.innerHTML = "";
	this.UBBFrame.value = "";
	this.editable();
};
QZEditorArea.prototype.clear = function() {
	if (this.readyState == false) return;
	switch (this.editMode) {
	case 1:
		this.Document.body.innerHTML = "";
		break;
	case 0:
		this.UBBFrame.value = "";
		break;
	}
};
QZEditorArea.prototype.editable = function() {
	if (FBrowser.isIE) {
		this.Document.body.contentEditable = true;
		this.Document.body.innerHTML = "";
		this.Document.execCommand('MultipleSelection', true);
	} else {
		this.Document.designMode = "on";
		if(FBrowser.isFirefox){
			this.Document.open();
			this.Document.close();
		}
		try{this.Document.execCommand('StyleWithCSS', false, false);}catch(e){}
	}
	this.Document.body.style.fontSize = _defaultFontSize;
	var aI = Fid("b_" + this.editorID + '_autoIndent');
	if (aI && _autoIndent) {
		qzCommand(this.editorID, 'autoIndent', aI);
	}

	this.readyState = true;
	if (this.html) {
		this.Document.body.innerHTML = this.filterImage(this.html);
		this.html = null;
	} else if (this.ubbCache) {
		this.Document.body.innerHTML = this.UBB2HTML(this.filterImage(this.ubbCache, true));
		this.ubbCache = null;
	}
	this.eventListen();
	this.writeHistory();
	if ( !! _autoFocus) this.focus();
};

QZEditorArea.prototype.filterImage = function(str, isUbb){
	if(!this.disableImg || !str) return str;
	if(!isUbb){
		return str.replace(/<img([^>]+)>/gi, '');
	} else return str.replace(/(\[img(,(\d+),(\d+))?\]http(.[^\]\\'"]*)\[\/img\]|\[qqshow,(\d+),(\d+),(\d+),(\d+)\]http(.[^\]\\'"]*)\[\/qqshow\])/gi, '');
};

QZEditorArea.prototype.UBB2HTML = function(str, conv){
	str = UBB2HTML(str, conv);
	if(this.enableMusic) str = str.replace(/\[music\]([^\[]+?)\[\/music\]/gi, function(a0, a1){
		var arr = a1.split('\|');
		if(arr.length >= 6  && arr.length%6<=1) return '<img transImg="0" src="http://imgcache.qq.com/ac/b.gif" music="' + a1.replace(/"/g, '“') + '" class="music_'+(arr.length>6?'multiple':'single')+'"/>';
		return '';
	});

	return str;
};

QZEditorArea.prototype.HTML2UBB = function(str){
	if(this.enableMusic) {
		str = str.replace(/<img[^>]*?music="([^"]+?)"[^>]*?\/?>/gi, '[music]$1[/music]');
		str = str.replace(/<img[^>]*?music='([^']+?)'[^>]*?\/?>/gi, '[music]$1[/music]');
	}

	if(_editorType=="UBB")//过滤掉weord到富文本的<!--[if gte mso 9] -->标签
	{
		str = str.replace(/<\!--.*?-->/gi,'');
	}
	return HTML2UBB(str);
};

QZEditorArea.prototype.eventListen = function() {
	FaddEvent(this.Document, "keyup", qzEditor_keyup);
	FaddEvent(this.Document, "mousedown", qzEditor_mousedown);
	FaddEvent(this.Document, "mouseup", qzEditor_mouseup);
	FaddEvent(this.UBBFrame, "keyup", qzEditorUBB_keyup);
	FaddEvent(this.Document, "keydown", qzEditor_keydown);
	FaddEvent(this.Document.body, "paste", qzEditor_paste);
	this.Document.body.onscroll = qzEditor_scroll;
};
QZEditorArea.prototype.focus = function() {
	if (!this.readyState) return;
	if (this.editMode == 0) {
		this.UBBFrame.focus();
	} else {
		try {
			if (FBrowser.isSafari) this.IFrame.focus();
			else this.frameWindow.focus();
		} catch(e) {}
	}
};

QZEditorArea.prototype.getHTML = function() {
	if (!this.readyState) return "";
	return this.Document.body.innerHTML.replace(/(\n|\r)/gi, "");
};
QZEditorArea.prototype.reloadHTML = function(strHTML) {
	if (_htmlMode) return;
	if (this.editMode != 0) {
		if (!strHTML) {
			var cache = this.HTML2UBB(this.getHTML());
			cache = this.UBB2HTML(cache, true);
		}

		this.Document.body.innerHTML = this.filterImage(strHTML ? strHTML: cache);
	}
};
QZEditorArea.prototype.fillHTML = function(strHTML, range, rangeType, bScroll) {
	strHTML = this.filterImage(strHTML);
	if (this.readyState) {
		var type = rangeType ? rangeType: (FBrowser.isIE ? this.Document.selection.type: null);
		var range = range ? range: (FBrowser.isIE ? this.Document.selection.createRange() : null);
		if (type == "Control") {
			range(0).outerHTML = strHTML;
		} else {
			range.pasteHTML(strHTML);
			range.collapse(true);
			range.select();
			if (typeof(bScroll) == "boolean") range.scrollIntoView(bScroll);
		}
	} else {
		this.html = strHTML;
	}
};
QZEditorArea.prototype.insertNodeAtSelection = function(node) {
	var sel = this.frameWindow.getSelection();
	if (!sel || !sel.getRangeAt) return;
	try {
		var range = sel.getRangeAt(0);
		if (!range) return;
		sel.removeAllRanges();
		range.deleteContents();
		var container = range.startContainer;
		var pos = range.startOffset;
		range = document.createRange();
		if (container.nodeType == 3 && node.nodeType == 3) {
			container.insertData(pos, node.nodeValue);
			range.setEnd(container, pos + node.length);
			range.setStart(container, pos + node.length);
		} else {
			var afterNode;
			if (container.nodeType == 3) {
				var textNode = container;
				container = textNode.parentNode;
				var text = textNode.nodeValue;
				var textBefore = text.substr(0, pos);
				var textAfter = text.substr(pos);
				var beforeNode = document.createTextNode(textBefore);
				afterNode = document.createTextNode(textAfter);
				container.insertBefore(afterNode, textNode);
				container.insertBefore(node, afterNode);
				container.insertBefore(beforeNode, node);
				container.removeChild(textNode);
			} else {
				afterNode = container.childNodes[pos];
				if ( !! afterNode) {
					container.insertBefore(node, afterNode);
				} else if (this.Document.body.childNodes.length > 0) {
					this.Document.body.insertBefore(node, this.Document.body.childNodes[0]);
				} else {
					try{ this.Document.body.insertBefore(node, null); } catch(e){ alert("请在编辑器内插入对象！"); }
				}
			}
			if ( !! afterNode) {
				range.setEnd(afterNode, 0);
				range.setStart(afterNode, 0);
			}
		}
		sel.addRange(range);
	} catch(err) {}
};
QZEditorArea.prototype.fillUBB = function(str) {
	str = this.filterImage(str, true);
	this.UBBFrame.value = str;
	if (this.readyState) this.Document.body.innerHTML = this.UBB2HTML(str);
	this.ubbCache = str;
};
QZEditorArea.prototype.fillText = function(strText, range) {
	if (FBrowser.isIE) {
		var range = range ? range: document.selection.createRange();
		strText = strText.replace(/%select%/g, range.text);
		range.text = strText;
		this.focus();
		range.select();
	} else {
		var textarea = this.UBBFrame;
		if (textarea.selectionStart || textarea.selectionStart == '0') {
			var startPos = textarea.selectionStart;
			var endPos = textarea.selectionEnd;
			var selText = textarea.value.substring(startPos, endPos);
			if (!selText) selText = strText;
			else selText = strText.replace(/%select%/g, selText);
			textarea.value = textarea.value.substring(0, startPos) + selText + textarea.value.substring(endPos, textarea.value.length);
			textarea.focus();
			var cPos = startPos + selText.length;
			textarea.selectionStart = cPos;
			textarea.selectionEnd = cPos;
		}
	}
};
QZEditorArea.prototype.saveHistory = function() {
	clearTimeout(window.historyTimeout);
	window.historyTimeout = setTimeout('editorHash[' + this.editorID + '].editorArea.writeHistory()', 1000)
};
QZEditorArea.prototype.writeHistory = function() {
	clearTimeout(window.historyTimeout);
	window.historyTimeout = 0;
	if (this.history.index != this.history.saveData.length) {
		this.history.saveData.splice(this.history.index, this.history.saveData.length);
	}
	this.history.index++;
	this.history.saveData.push(this.editMode == 0 ? this.UBBFrame.value: this.getHTML());
};
QZEditorArea.prototype.undo = function() {
	if (this.history.index <= 1) return;
	if (this.history.index - 1 > this.history.saveData.length) return;
	this.history.index--;
	this.Document.body.innerHTML = this.history.saveData[this.history.index - 1];
};
QZEditorArea.prototype.redo = function() {
	if (this.history.index >= this.history.saveData.length) return;
	if (this.history.index + 1 > this.history.saveData.length) return;
	this.history.index++;
	this.Document.body.innerHTML = this.history.saveData[this.history.index - 1];
};
QZEditorArea.prototype.reLoadHistory = function() {
	this.history.index = 0;
	this.history.saveData = [];
	this.writeHistory();
};

QZEditorArea.prototype.changeHeight = function(h){
	if(h > 3000) h = 3000;
	else if(h < 100) h = 100;
	editorHash[this.editorID].height = h;

	this.UBBFrame.style.height = editorHash[this.editorID].height + "px";
	this.IFrame.style.height = editorHash[this.editorID].height + "px";
};

//var _wysiwygToolbar = [["0", "fontFamily", "fontSize"], ['0', "bold", "italic", "underline", "fontColor", "removeformat"], ["0", "JustifyLeft", "JustifyCenter", "JustifyRight"], ["0", "autoIndent"], ["0", "face", "image", "audio"], ["0", "undo", "redo"], ["0", "ubb"]];
var _wysiwygToolbar = [["0", "fontFamily", "fontSize"], ['0', "bold", "italic", "underline", "fontColor", "removeformat"], ["0", "JustifyLeft", "JustifyCenter", "JustifyRight"], ["0", "autoIndent"], ["0",  "image", "audio"], ["0", "undo", "redo"]];
var _ubbToolbar = [["0", "fontFamily", "fontSize"], ['0', "bold", "italic", "underline", "fontColor", "href", "email"], ["0", "JustifyLeft_disable", "JustifyCenter", "JustifyRight"], ["0", "autoIndent_disable"], ["0", "face", "image", "audio"], ["0", "undo", "redo"], ["0", "html"]];
var _defaultToolbarHeight = "27px";
var QZEditorToolbar = function(id, ubbToolbar, wysiwygToolbar, opt) {
	this.eId = id;
	this.Target = Fid("qToolbar_" + id);
	this.uToolbar = ubbToolbar;
	this.wToolbar = wysiwygToolbar;
	this.toolbarList = this.wToolbar;
	this.disableImg = opt && opt.disableImg ? true : false;
	this.enableMusic = opt && opt.enableMusic ? true : false;
	this.init();
	this.highLightButton = new Object();
};
QZEditorToolbar.prototype.init = function() {
	this.buildToolBar();
	this.Target.oncontextmenu = function() {
		return false;
	};
};
QZEditorToolbar.prototype.buildToolBar = function(tList) {
	var cmdName = null;
	var tmpIndex = null;
	var toolBar = tList ? tList: this.toolbarList;
	this.toolbarList = toolBar ? toolBar: this.wToolbar;
	var strHTML = '<ul class="qzToolbar" style="height:' + _defaultToolbarHeight + ';list-style-type:none">';
	for (i = 0; i < this.toolbarList.length; i++) {
		var items = this.toolbarList[i];
		if (items.length == 0) continue;
		if(this.disableImg&& items[2]=='image') continue;
		strHTML += '<li unselectable="on"' + ((items[0] > 0) ? (' style="width:' + items[0] + 'px">') : '>');
		for (j = 1; j < items.length; j++) {
			if(!this.enableMusic && items[j]=='audio') continue;
			tmpIndex = items[j].indexOf('_s');
			if (tmpIndex > 0) cmdName = items[j].substr(0, tmpIndex);
			else cmdName = items[j];
			switch (items[j]) {
			/*case "fontFamily":
				strHTML += '<span unselectable="on"><table unselectable="on" onmouseover="this.className=\'tableHover\';" onmouseout="this.className=\'tableNotHover\';" style="width:100px;" class="tableNotHover" onclick="qzCommand(' + this.eId + ',\'fontFamily\',this);"><tbody unselectable="on"><tr unselectable="on"><td class="qzInputArea" unselectable="on"><label id="tb_ffLable" style="width:85px;" unselectable="on">宋体</label></td><td class="qzDownArrowBtn" unselectable="on"><p style="width:14px;" unselectable="on"></p></td></tr></tbody></table></span>';
				break;
			case "fontSize":
				strHTML += '<span unselectable="on"><table unselectable="on" onmouseover="this.className=\'tableHover\';" onmouseout="this.className=\'tableNotHover\';" style="width:50px;" class="tableNotHover" onclick="qzCommand(' + this.eId + ',\'fontSize\',this);"><tbody unselectable="on"><tr unselectable="on"><td class="qzInputArea" unselectable="on"><label id="tb_fsLable" style="width:40px;" unselectable="on">五号</label></td><td class="qzDownArrowBtn" unselectable="on"><p style="width:14px;" unselectable="on"></p></td></tr></tbody></table></span>';
				break;*/
			case "JustifyLeft_disable":
				strHTML += '<span unselectable="on" title="' + _lang[cmdName] + '"><div unselectable="on" class="b_' + items[j] + '"></div></span>';
				break;
			case "autoIndent_disable":
				strHTML += '<span unselectable="on" title="' + _lang[cmdName] + '"><div unselectable="on" class="b_' + items[j] + '"></div></span>';
				break;
			/*
			case "JustifyLeft":
			case "JustifyCenter":
			case "JustifyRight":
				strHTML += '<span unselectable="on" style="padding:3px 0px 0px 3px"  title="' + _lang[cmdName] + '"><a id="b_' + this.eId + '_' + cmdName + '" onclick="qzCommand(' + this.eId + ',\'' + cmdName + '\',this);return false" onmouseover="qzSwitchMenu(' + this.eId + ',this,\'' + cmdName + '\')" href="javascript:;"><div unselectable="on" class="b_' + items[j] + '"></div></a></span>';
				break;
			*/
			default:
				strHTML += '<span unselectable="on" title="' + _lang[cmdName] + '"><a id="b_' + this.eId + '_' + cmdName + '" onclick="qzCommand(' + this.eId + ',\'' + cmdName + '\',this);return false" onmouseover="qzSwitchMenu(' + this.eId + ',this,\'' + cmdName + '\')" href="javascript:;"><div unselectable="on" class="b_' + items[j] + '_s'/*全部小图标*/ + '"></div></a></span>';
			}
		}
		strHTML += '</li>';
		
		
		if (i < this.toolbarList.length - 1) {
			strHTML += '<li class="s" unselectable="on"' + ((parseInt(_defaultToolbarHeight) >= 12) ? (' style="height:' + (parseInt(_defaultToolbarHeight) - 12) + 'px;"') : '') + '></li>';
		}
	}
	//strHTML += '<li>&nbsp;<a hre="" onclick="test(this);">预览</a></li>';
	strHTML += '</ul>';
	this.Target.innerHTML = strHTML;
};

QZEditorToolbar.prototype.updateFontFamily = function(family) {
	if (!family) family = "宋体";
	var fL = Fid("tb_ffLable");
	if ( !! fL) fL.innerHTML = family;
};
QZEditorToolbar.prototype.updateFontSize = function(size) {
	if (parseInt(size) < 1 || parseInt(size) > 6) size = 2;
	var fs = _fontSize.split(";");
	var fL = Fid("tb_fsLable");
	if ( !! fL) fL.innerHTML = fs[size - 1].split("/")[1];
};
QZEditorToolbar.prototype.highLight = function(command) {
	var bt = Fid('b_' + this.eId + '_' + command);
	if (bt) {
		bt.className = "on";
		this.highLightButton[command] = true;
	}
};
QZEditorToolbar.prototype.disHighLight = function(command) {
	var bt = Fid('b_' + this.eId + '_' + command);
	if (bt) {
		bt.className = "";
		delete this.highLightButton[command];
	}
};
QZEditorToolbar.prototype.disHighLightAll = function() {
	for (c in this.highLightButton) {
		var bt = Fid('b_' + this.eId + '_' + c);
		if (bt) bt.className = "";
	}
	this.highLightButton = {};
};
QZEditorToolbar.prototype.disCommandHighLight = function() {
	var command = /(bold|italic|underline|Justify|face|href|image|flash|video|audio|vphoto|namecard)/i;
	for (c in this.highLightButton) {
		if (command.test(c)) {
			var bt = Fid('b_' + this.eId + '_' + c);
			if (bt) bt.className = "";
		}
	}
	this.highLightButton = {};
};
function qzCommand(eID, command, value) {
	if (command.indexOf("_disable") >= 0) return;
	var editorArea = editorHash[eID].editorArea;
	var editorDocument = editorArea.Document;
	var editorMode = editorArea.editMode;
	editorArea.focus();
	if (editorArea.bEmptyEditPaper == true) {
		editorArea.clear();
		editorArea.bEmptyEditPaper = false;
	}
	var range = (FBrowser.isIE ? editorDocument.selection.createRange() : null);
	var selectionType = (FBrowser.isIE ? editorDocument.selection.type: null);
	var selectionRange = (FBrowser.isIE ? ((editorArea.editMode == 0) ? document.selection.createRange() : editorDocument.selection.createRange()) : null);
	switch (command) {
	case "autoIndent":
		editorArea.autoIndent = !editorArea.autoIndent;
		if (editorArea.autoIndent) editorHash[eID].toolBar.highLight("autoIndent");
		else editorHash[eID].toolBar.disHighLight("autoIndent");
		break;
	case "ubb":
		editorArea.switchMode(0);
		break;
	case "html":
		editorArea.switchMode(1);
		break;
	case "fontFamily":
		showQZPanel(eID, value, command);
		return;
	case "fontSize":
		showQZPanel(eID, value, command);
		return;
	case "fontColor":
		showQZPanel(eID, value, command);
		return;
	case "face":
		showQZPanel(eID, value, command);
		return;
	case "fillFamily":
		if (editorMode == 0) {
			editorArea.fillText("[ftf=" + value + "]%select%[/ft]");
		} else {
			if (FBrowser.isIE) {
				var node = editorArea.findElementByName("FONT");
				if (node && (!range.text || range.text == node.innerText)) {
					var glow = node.filters.glow;
					if (glow) {
						editorArea.selectNode(node);
						node.innerHTML = "<font face=" + value + ">" + node.innerHTML + "</font>";
						break;
					};
				}
			}
			editorDocument.execCommand("FontName", false, value);
			editorHash[eID].toolBar.updateFontFamily(value);
			editorArea.writeHistory();
			return;
		}
		break;
	case "fillSize":
		if (editorMode == 0) {
			editorArea.fillText("[fts=" + value + "]%select%[/ft]");
		} else {
			if (FBrowser.isIE) {
				var node = editorArea.findElementByName("FONT");
				if (node && (!range.text || range.text == node.innerText)) {
					var glow = node.filters.glow;
					if (glow) {
						editorArea.selectNode(node);
						node.innerHTML = "<font size=" + value + ">" + node.innerHTML + "</font>";
						break;
					};
				};
			}
			editorDocument.execCommand("FontSize", false, value);
			editorHash[eID].toolBar.updateFontSize(value);
			editorArea.writeHistory();
			return;
		}
		break;
	case "fillColor":
		var lC = window.lastCommand == "fontColor";
		if (editorMode == 0) {
			editorArea.fillText(lC ? "[ftc=#" + value + "]%select%[/ft]": "[ffg,#" + value + ",#FFFFFF]%select%[/ft]");
		} else {
			if (lC) editorDocument.execCommand("ForeColor", false, "#" + value);
			else {
				editorDocument.execCommand("removeformat");
				var _p = '<font class="lightFont" style="filter: glow(color=#' + value + ',strength=3);color: #' + value + ';height:auto;" title="发光字">';
				var _b = '</font>';
				if (!range.text) {
					var object = promptPlus("请输入文字", ["请输入需要发光显示的文字", ""]);
					if (!object || !object[0]) return;
					editorArea.fillHTML(_p + object[0] + _b);
				} else {
					var re = /(<(div|p)[^>]*>)(.*?)(<\/(div|p)[^>]*>)/ig;
					if (re.test(range.htmlText)) {
						strHTML = range.htmlText.replace(re, "$1" + _p + "$3" + _b + "$4");
						editorArea.fillHTML(strHTML);
					} else editorArea.fillHTML(_p + range.htmlText + _b);
				}
			}
		}
		break;
	case "fillEM":
		if (editorMode == 0) {
			editorArea.fillText("[em]e" + value + "[/em]");
		} else {
			var strUrl = "http://imgcache.qq.com/qzone/em/e" + value + ".gif";
			if (FBrowser.isIE) {
				editorArea.fillHTML('<img src="' + strUrl + '" onresizestart="return false"/>');
			} else {
				editorDocument.execCommand('InsertImage', false, strUrl);
			}
		}
		break;
	case "href":
		if (_multiHrefSelect == true) {
			fillNewHref(eID, selectionRange, selectionType, range);
		} else {
			fillHref(eID);
		}
		break;
	case "email":
		if (_multiHrefSelect == true && FBrowser.isIE) {
			fillNewHref(eID, selectionRange, selectionType, range, true);
		} else {
			var t0 = "插入邮件地址";
			var t1 = "请输入链接要显示的文字,只能包含中文或英文字母";
			var t2 = "请输入EMail地址(abc@abc.com)";
			if (FBrowser.isIE) {
				var object = promptPlus(t0, [t1, ( !! range ? range.text: "")], [t2, ""]);
				if (!object || !object[1]) return;
				editorArea.fillText("[email=" + object[0] + "]" + object[1] + "[/email]");
			} else {
				var para = {
					title: t0,
					subject: [[t1, ""], [t2, ""]]
				};
				showGeckoDialog(eID, command, Gy_Editor_promptDialogPath, 450, 180, para);
				return;
			}
		}
		break;
	case "image":
		loadExtJs(function(){
			imgUtil.showPicker({
				multi	: 1,
				callback	: function(o){
					if(!o) return;
					for(var k in o){
						fillContent(eID, command, o[k].url, selectionRange, selectionType);
					}
				}
			});
		});
		break;
	case "audio":
		loadMusicJs(function(){
			musicUtil.picker.show({
				callback	: function(o){
					fillContent(eID, command, o, selectionRange, selectionType);
				}
			});
		});
		break;
	default:
		if (/(redo|undo)/ig.test(command) && FBrowser.isIE) {
			editorArea[command]();
			return;
		}
		if (editorMode == 0) {
			var tag = "B";
			if (command == "italic") tag = "I";
			else if (command == "underline") tag = "U";
			else if (command == "JustifyCenter") tag = "M";
			else if (command == "JustifyRight") tag = "R";
			editorArea.fillText("[" + tag + "]%select%[/" + tag + "]");
		} else {
			editorDocument.execCommand(command, false, "");
		}
	}
	if (editorMode) getCommandState(eID);
	editorArea.writeHistory();
}
function fillNewHref(eID, selectionRange, selectionType, range, bEmailFlag) {
	var editorArea = editorHash[eID].editorArea;
	var editorMode = editorArea.editMode;
	if (FBrowser.isIE) {
		var node = editorArea.findElementByName("A");
		var rText = (node ? editorArea.selectNode(node) : ( !! range ? range.text: ""));
		parent.g_qzSelectedHrefInfo = [(( !! rText && !!node) ? node.href: ""), ( !! rText ? rText: ""), (( !! rText && !!node) ? node.link: "")];
		var strHTML = '<iframe id="QZEditor_Href' + eID + '" frameborder="0" src="http://imgcache.qq.com/qzone/blog/ubb_href_new.htm?editorid=' + eID + ( !! bEmailFlag ? "&emailflag=1": "") + '" allowTransparency="true" style="width:442px;"></iframe>';
		popupDialog("插入超链接", strHTML, 442, 400);
		top.popupCallback = function() {
			if ( !! parent.g_arrQZEditorReturnVal && !!parent.g_arrQZEditorReturnVal[eID]) {
				var data = parent.g_arrQZEditorReturnVal[eID];
				if (editorMode == 0) {
					editorArea.focus();
					if (data[2] == 1) {
						editorArea.fillText("[card=" + data[1] + "]" + data[0] + "[/card]", selectionRange);
					} else if (data[2] == 2) {
						editorArea.fillText("[email=" + data[0] + "]" + data[1] + "[/email]", selectionRange);
					} else {
						editorArea.fillText("[url=" + data[1] + "]" + data[0] + "[/url]", selectionRange);
					}
				} else {
					var url = (data[2] == 1) ? ("<a href='http://user.qzone.qq.com/" + data[1] + "' link='nameCard_" + data[1] + "' class='nameCard'>" + data[0] + "</a>") : ('<a href="' + data[1] + '">' + data[0] + '</a>');
					if ( !! rText && !!node) {
						node.href = (data[2] == 1 ? ("http://user.qzone.qq.com" + data[1]) : data[1]);
						if (data[2] == 1) node.link = "nameCard_" + data[1];
						try {
							selectionRange.select();
						} catch(err) {};
					} else {
						editorArea.focus();
						editorArea.fillHTML(url, selectionRange, selectionType);
					}
				}
				top.g_arrQZEditorReturnVal[eID] = null;
				if (editorMode) getCommandState(eID);
				editorArea.writeHistory();
			}
		}
	} else {
		fillHref(eID);
	}
}
function fillHref(eID) {
	var editorArea = editorHash[eID].editorArea;
	var editorDocument = editorArea.Document;
	var editorMode = editorArea.editMode;
	var range = (FBrowser.isIE ? editorDocument.selection.createRange() : null);
	var t0 = "插入超链接";
	var t1 = "请输入链接要显示的文字,只能包含中文或英文字母";
	var t2 = "请输入地址";
	var t3 = "链接类型";
	var s = [["http://", "http://"], ["mailto:", "mailto:"]];
	if (editorMode == 0) {
		if (FBrowser.isIE) {
			var object = promptPlus(t0, [t1, range.text], [t2, "http://"]);
			if (!object || !object[1]) return;
			editorArea.fillText("[url=" + object[1] + "]" + object[0] + "[/url]");
		} else {
			var para = {
				title: t0,
				subject: [[t1, ""], [t2, "http://"]]
			};
			showGeckoDialog(eID, "href", Gy_Editor_promptDialogPath, 450, 180, para);
			return;
		}
	} else {
		node = editorArea.findElementByName("A");
		var pTR = new RegExp('^(((http|https|ftp|news):\/\/)|mailto:)', 'ig');
		var link = node ? node.href: "";
		var p = pTR.exec(link);
		var sUrl = p ? link.substr(p[0].length) : link;
		var pt = p ? p[0] : "http://";
		if (FBrowser.isIE) {
			var rText = node ? editorArea.selectNode(node) : range.text;
			var object = rText ? promptPlus(t0, [t3, pt, s], [t2, sUrl]) : promptPlus(t0, [t1, ""], [t3, pt, s], [t2, sUrl]);
			if (!object || !object[0]) return;
			var re = /(http:\/\/|mailto:)/ig;
			if (!rText) {
				object[2] = object[2].replace(re, "");
				editorArea.fillHTML('<a href="' + object[1] + object[2] + '">' + object[0] + '</a>');
			} else {
				object[1] = object[1].replace(re, "");
				editorDocument.execCommand("CreateLink", false, object[0] + object[1]);
			}
		} else {
			var para = {
				title: t0,
				subject: []
			};
			if (link) {
				para.subject.push([t3, pt, s]);
				para.subject.push([t2, sUrl]);
			} else {
				para.subject.push([t1, ""]);
				para.subject.push([t3, pt, s]);
				para.subject.push([t2, sUrl]);
			}
			showGeckoDialog(eID, "href",Gy_Editor_promptDialogPath, 450, 250, para);
			return;
		}
	}
}
function fillContent(eID, command, value, selectionRange, selectionType) {
	var editorArea = editorHash[eID].editorArea;
	var editorDocument = editorArea.Document;
	var editorMode = editorArea.editMode;
	editorArea.focus();
	switch (command) {
	case "email":
		if (FBrowser.isIE || !value || !value[0]) return;
		editorArea.fillText("[email=" + value[0] + "]" + value[1] + "[/email]");
		editorArea.writeHistory();
		break;
	case "href":
		if (FBrowser.isIE || !value || !value[0]) return;
		if (editorMode == 0) {
			editorArea.fillText("[url=" + value[0] + "]" + value[1] + "[/url]");
		} else {
			var re = /(http:\/\/|mailto:)/ig;
			var node = editorArea.findElementByName("A");
			var strHTML = "";
			var strHref = "";
			if (!node) {
				strHTML = value[0];
				strHref = value[1] + value[2].replace(re, "");
			} else {
				strHref = value[0] + value[1].replace(re, "");
				strHTML = node.innerHTML;
				if ( !! node.parentNode) {
					node.parentNode.removeChild(node);
				}
			}
			var oLink = editorArea.frameWindow.document.createElement('a');
			oLink.href = strHref;
			oLink.innerHTML = strHTML;
			editorArea.insertNodeAtSelection(oLink);
			if (editorMode) getCommandState(eID);
		}
		editorArea.writeHistory();
		break;
	case "image":
	case "images":
		if (editorMode == 0) {
			editorArea.fillText("[img]" + value + "[/img]" + (command == "images" ? "\n\n": ""));
		} else {
			var rID = "postImg_" + parseInt(Math.random() * 10000);
			var strSrc = Gy_Editor_ImagesPath + '/re_sending.gif';
			if (FBrowser.isIE) {
				editorArea.fillHTML('<img transImg="' + 0 + '" id="' + rID + '" src="' + strSrc + '" orgSrc="' + value + '"/>' + (command == "images" ? "<br/><br/>": ""), selectionRange, selectionType);
			} else {
				var img = fillGeckoImage(eID, strSrc, "", {
					"id": rID
				});
				img.setAttribute("orgSrc", value);
				if (editorMode) getCommandState(eID);
				editorArea.writeHistory();
			}
			var img = new Image();
			var func = function(o){
				var sImg = editorArea.Document.getElementById(rID);
				if (sImg) {
					sImg.src = o.src;
					if (FBrowser.isIE) {
						sImg.orgSrc = "";
					} else {
						sImg.setAttribute("orgSrc", "");
					}
				}
				if (editorMode) getCommandState(eID);
				editorArea.writeHistory();
			};
			if(!FBrowser.isIE){
				img.onload = function() {
					func(this);
					this.onload = null;
				};
			} else {
				img.onreadystatechange = function(){
					if(this.readyState.toLowerCase()!='loaded' && this.readyState.toLowerCase()!='complete') return;
					func(this);
					this.onreadystatechange = null;
				};
			}

			img.src = value;
		}
		break;
	case "audio":
		var newValue = [];
		for(var i in value){
			var v = value[i];
			newValue = newValue.concat([v.song_id, 0, v.song_url, v.song_name, v.singer_id, v.singer_name]);
		}
		value = newValue.join('|');
		if(value.length<6) return;
		if (editorMode == 0) {
			editorArea.fillText("[music]" + value + "[/music]");
		} else {
			if (FBrowser.isIE) {
				editorArea.fillHTML('<img transImg="0" src="http://imgcache.qq.com/ac/b.gif" music="' + value.replace(/"/g,'“') + '" class="music_'+(value.length>6?'multiple':'single')+'"/>', selectionRange, selectionType);
			} else {
				var img = fillGeckoImage(eID, 'http://imgcache.qq.com/ac/b.gif', "");
				img.setAttribute("music", value);
				if (editorMode) getCommandState(eID);
				editorArea.writeHistory();
			}
		}
		break;
	default:
		break;
	}
}
function showQZPanel(eID, object, command) {
	if (window.lastCommand == command) return;
	window.qzIframePopupOpened = false;
	var bP = FgetPostion(object);
	var pop = showPopDialog(bP.x+(FBrowser.isIE?1:0), bP.y + bP.height-1);
	pop.innerHTML = returnPanel(command);
	pop = null;
	window.lastEditID = eID;
	window.lastCommand = command;
	window.qzMenuOpened = true;
	editorHash[eID].toolBar.highLight(command);
}
function qzSwitchMenu(eID, object, command) {
	if (window.qzMenuOpened) {
		var dl = Fid("qzDialog");
		switch (command) {
		case "fontFamily":
		case "fontSize":
		case "fontColor":
		case "face":
			hidePopDialog();
			showQZPanel(eID, object, command);
			break;
		default:
			hidePopDialog(true);
		}
	}
}
function returnPanel(command) {
	switch (command) {
		case "fontColor":
			return colorPanel();
		case "face":
			return facePanel();
		case "fontSize":
			return fSizePanel();
		case "fontFamily":
			return fFamilyPanel();
	}
}
function fillQZCommand(command, value) {
	qzCommand(window.lastEditID, command, value);
	hidePopDialog();
}
function colorPanel() {
	if (top.g_ColorPanel) return top.g_ColorPanel;
	var ColorHex = new Array('00', '33', '66', '99', 'CC', 'FF');
	var SpColorHex = new Array('FF0000', '00FF00', '0000FF', 'FFFF00', '00FFFF', 'FF00FF');
	var colorTable = '<tr><td colspan="18" class="colorViewer"><input  id="colorViewer" style="width:50px;background:#ECE9D8" readonly="readonly"><input  id="colorViewerCode" style="width:80px;" readonly></td></tr>';
	for (i = 0; i < 2; i++) {
		for (j = 0; j < 6; j++) {
			colorTable += '<tr>';
			for (k = 0; k < 3; k++) {
				for (l = 0; l < 6; l++) {
					var c = ColorHex[k + i * 3] + ColorHex[l] + ColorHex[j];
					colorTable += '<td unselectable="on" id="c_' + c + '" style="background-color:#' + c + '" mcolor="#' + c + '" onmouseover="rollInColorPanel(this)" onmouseout="rolloutColorPanel(this)" onclick="fillQZCommand(\'fillColor\',\'' + c + '\')"></td>'
				}
			}
			colorTable += '</tr>';
		}
	}
	colorTable = '<table border="1" cellspacing="0" cellpadding="0" class="qzColorPanel">' + colorTable + '</table>';
	top.g_ColorPanel = colorTable;
	return top.g_ColorPanel;
}
function rollInColorPanel(o) {
	o.style.backgroundColor = '#fff';
	Fid("colorViewer").style.backgroundColor = o.getAttribute("mcolor");
	Fid("colorViewerCode").value = o.getAttribute("mcolor");
}
function rolloutColorPanel(o) {
	o.style.backgroundColor = o.getAttribute("mcolor");
	Fid("colorViewer").style.backgroundColor = "#ECE9D8";
	Fid("colorViewerCode").value = "";
}
//表情
function facePanel() {
	if (top.g_FacePanel) return top.g_FacePanel;
	var faceTable = "";
	for (i = 0; i < 7; i++) {
		faceTable += "<tr>";
		for (j = 0; j < 15; j++) faceTable += '<td><img src="about:blank" onerror="src=\'http://imgcache.qq.com/qzone/em/e' + (15 * i + j + 100) + '.gif\';onerror=null" onload="style.visibility=\'visible\';onload=null" onmouseover="this.style.borderColor=\'#366EAE\';" onmouseout="this.style.borderColor=\'#EEF7FF\';" onclick="fillQZCommand(\'fillEM\',\'' + (15 * i + j + 100) + '\')" width="24" style="visibility:hidden"/></td>';
		faceTable += "</tr>";
	}
	faceTable = '<table border="1" cellspacing="0" cellpadding="0" class="qzFacePanel">' + faceTable + '</table>';
	top.g_FacePanel = faceTable;
	return faceTable;
}
function fSizePanel() {
	if (top.g_fSizePanel) return top.g_fSizePanel;
	var fSizeUL = "<div>";
	var fs = _fontSize.split(";");
	for (var i = 0; i < fs.length; i++) {
		var f1 = fs[i].split("/")[0],
		f2 = fs[i].split("/")[1];
		fSizeUL += '<a href="javascript:;" onclick="fillQZCommand(\'fillSize\',\'' + f1 + '\');return false" class="l"><font size="' + f1 + '">' + f2 + '</font></a>';
	}
	top.g_fSizePanel = fSizeUL + "</div>";
	return top.g_fSizePanel;
}
function fFamilyPanel() {
	if (top.g_fFamilyPanel) return top.g_fFamilyPanel;
	var fFamilyUL = "";
	var ff = _fontFamliy.split(";");
	for (var i = 0; i < ff.length; i++) {
		fFamilyUL += '<a href="javascript:;" onclick="fillQZCommand(\'fillFamily\',\'' + ff[i] + '\');return false"  class="l"><font face="' + ff[i] + '">' + ff[i] + '</font></a>';
	}
	top.g_fFamilyPanel = fFamilyUL;
	return fFamilyUL;
}

var _lang = {
	ubb: "经典编辑器",
	html: "所见即所得模式",
	fontFamily: "字体",
	fontSize: "字号",
	fontColor: "字体颜色",
	bold: "加粗",
	italic: "倾斜",
	underline: "下划线",
	JustifyLeft: "左对齐",
	JustifyLeft_disable: "左对齐",
	JustifyCenter: "居中",
	JustifyRight: "右对齐",
	undo: "撤销",
	redo: "恢复",
	removeformat: "清除样式",
	face: "插入表情",
	href: "插入超链接",
	image: "插入图片",
	audio: "插入QQ音乐",
	help: "所见即所得编辑器帮助",
	email: "电子邮件",
	autoIndent: "自动排版",
	autoIndent_disable: "自动排版"
};
function createEditor(containID) {
	if (!window.qzCSSReady) {
		insertCSS(Gy_Editor_qzCSSPath);
		window.qzCSSReady = true;
		var img = new Image();
		img.src = Gy_Editor_ImagesPath + "/re_sending.gif";
	}
	id = editorHash.length;
	editorHash[id] = new QZEditor(id, containID);
	return editorHash[id];
}
function closeMsgbox(evt) {
	evt = FgetEvent(evt);
	source = FgetEventTarget(evt);
	var tipsDiv = Fid(source.sID);
	tipsDiv.style.display = "none";
	tipsDiv.innerHTML = "";
	var oEditor = editorHash[source.id];
	if (!oEditor) return;
	oEditor.refreshDefinePanelPos();
}

function checkInvaildDom(eID) {
	if (_htmlMode) return;
	var re = new RegExp("<(table|tr|td|object|script|embed|h1|h2|h3|h4|h5|hr|ul|li|ol|strike"+(editorHash[eID].disableImg?'|img':'')+")", 'i');
	var str = editorHash[eID].editorArea.getHTML();
	if (re.test(str)) {
		editorHash[eID].msgbox('<font color="red">您粘贴的内容中,有部分效果无法识别,<a href="javascript:;" onclick="editorHash[' + eID + '].editorArea.reloadHTML();editorHash[' + eID + '].hiddenMsgbox();return false">点击此处查看发表后的效果</a></font>', true);
	}
}
function getCommandState(eID) {
	var c = _commandStates;
	var d = editorHash[eID].editorArea.Document;
	var isLink = false;
	var strHTML = "";
	if (!window.qzMenuOpened) editorHash[eID].toolBar.disCommandHighLight();
	if (window.qzIframePopupOpened) hidePopDialog();
	var lNode = editorHash[eID].editorArea.findElementByName("A");
	if (lNode) {
		isLink = true;
		if (!window.qzMenuOpened) {
			var nWidth = "200px;";
			if (lNode.link) {
			} else {
				editorHash[eID].toolBar.highLight("href");
				try {
					strHTML = [lNode.href, '<div>', '<a href="javascript:;" onclick="qzCommand(' + eID + ',\'Unlink\');return false" title="取消超链接">移除</a></div>'].join("");
				} catch(err) {
					strHTML = '';
				}
			}
			if (strHTML.length > 0) editorHash[eID].editorArea.popup(strHTML, nWidth, "auto", 0, lNode.offsetHeight + 2, lNode);
		}
		lNode = null;
	}
	var iNode = editorHash[eID].editorArea.findElementByName("IMG");
	if (iNode) {
		var isEM = /em\/e(\d{1,3}).gif/i.test(iNode.src);
		var isMusic = !!iNode.getAttribute('music');
		
		if(isEM){
			editorHash[eID].toolBar.highLight("face");
		} else if(isMusic){
			editorHash[eID].toolBar.highLight("audio");
		} else {
			editorHash[eID].toolBar.highLight("image");
			if (!window.qzMenuOpened && !isEM && !isMusic) {
				var rID = "img_" + parseInt(Math.random() * 100000);
				iNode.id = rID;
				strHTML = '<b>图片地址:</b><br/>&nbsp;&nbsp;<input value="' + ( !! iNode.originSrc ? iNode.originSrc: iNode.src) + '" style="width:228px;" readonly="readonly"/><br/>&nbsp;&nbsp;<a href="javascript:;" onclick="defaultSize(' + eID + ',\'' + rID + '\');return false" title="默认尺寸">默认尺寸</a>';
				if (isLink) strHTML += ' |<a href="javascript:;" onclick="qzCommand(' + eID + ',\'Unlink\');return false" title="取消超链接">移除图片超链接</a>';
				if ((FBrowser.isIE ? iNode.orgSrc: iNode.getAttribute("orgSrc"))) strHTML = "图片加载中... 请稍候.";
				editorHash[eID].editorArea.popup(strHTML, "250px", "auto", 1, iNode.offsetHeight + 2, iNode);
				if (!iNode.ondragend || !iNode.onresizeend) {
					iNode.onresizeend = iNode.ondragend = function() {
						hidePopDialog();
					};
				}
			}
		}
		iNode = null;
	}
	var ftSize = 2;
	var ftFamily = "宋体";
	var fNode = editorHash[eID].editorArea.findElementByName("FONT");
	if (fNode) {
		if (fNode.size || fNode.style.fontSize) {
			ftSize = ( !! fNode.size ? fNode.size: fNode.style.fontSize);
			editorHash[eID].toolBar.updateFontSize(ftSize);
		}
		if (fNode.face || fNode.style.fontFamily) {
			ftFamily = ( !! fNode.face ? fNode.face: fNode.style.fontFamily);
			editorHash[eID].toolBar.updateFontFamily(ftFamily);
		}
	}
	if (FBrowser.isIE) {
		editorHash[eID].toolBar.updateFontSize(ftSize);
		editorHash[eID].toolBar.updateFontFamily(ftFamily);
	}
	if (!FBrowser.isIE) {
		fNode = editorHash[eID].editorArea.findElementByName("SPAN");
		if (fNode) {
			if (fNode.face || fNode.style.fontFamily) ftFamily = ( !! fNode.face ? fNode.face: fNode.style.fontFamily);
			while (fNode && fNode.parentNode) {
				fNode = fNode.parentNode;
				if (fNode.tagname && fNode.tagName.toUpperCase() == "FONT") {
					ftSize = ( !! fNode.size ? fNode.size: fNode.style.fontSize);
					editorHash[eID].toolBar.updateFontSize(ftSize);
					break;
				}
			}
			editorHash[eID].toolBar.updateFontFamily(ftFamily);
		}
	}
	if (editorHash[eID].editorArea.editMode == 1) {
		try {
			for (var i = 0; i < c.length; i++) {
				if (d.queryCommandState(c[i])) editorHash[eID].toolBar.highLight(c[i]);
			}
		} catch(e) {}
	}
}
function showPopDialog(x, y) {
	var dl = Fid("qzDialog");
	if (!dl) {
		dl = document.createElement("div");
		dl.className = "qzDialog";
		dl.id = "qzDialog";
		document.body.appendChild(dl);
	}
	if ( !! window.editorContainerDom) window.editorContainerDom.appendChild(dl);
	dl.style.display = "";
	dl.style.left = x + "px";
	dl.style.top = y + "px";
	FaddEvent(document.body, "keyup", toHidePop);
	FaddEvent(document.body, "mousedown", toHidePop);
	return dl;
}
function toHidePop(evt) {
	evt = FgetEvent(evt);
	source = FgetEventTarget(evt);
	if (evt.keyCode == 9) hidePopDialog();
	var btID = 'b_' + window.lastEditID + '_' + window.lastCommand;
	while (source.parentNode) {
		if (source.className == "qzDialog" || btID == source.id) {
			return;
		}
		source = source.parentNode;
	}
	hidePopDialog();
}
function hidePopDialog(keep) {
	FremoveEvent(document.body, "keyup", toHidePop);
	FremoveEvent(document.body, "mousedown", toHidePop);
	var dl = Fid("qzDialog");
	if (dl) {
		dl.style.display = "none";
	}
	if (window.lastCommand) editorHash[window.lastEditID].toolBar.disHighLight(window.lastCommand);
	if (!keep) {
		window.lastEditID = null;
		window.lastCommand = null;
		window.qzMenuOpened = false;
		window.qzIframePopupOpened = false;
	}
}
function promptPlus(title) {
	var arg = {
		title: title,
		subject: []
	};
	for (var i = 1; i < arguments.length; i++) {
		arg.subject.push(arguments[i]);
	}
	var h = 50 + 41 * arguments.length;
	var val = showModalDialog(Gy_Editor_promptDialogPath, arg, "dialogWidth:450px;dialogHeight:" + h + "px;status:no;help:no");
	return val;
}
function showGeckoDialog(eID, cmd, url, width, height, para) {
	var editorArea = editorHash[eID].editorArea;
	var iLeft = (document.body.offsetWidth - width) / 2 + "px";
	var iTop = (document.body.offsetHeight - height) / 2 + "px";
	var sOption = "location=no,menubar=no,toolbar=no,dependent=yes,modal=yes,dialog=yes,minimizable=no," + "alwaysRaised=yes,resizable=no,width=" + width + "px,height=" + height + "px,top=" + iTop + ",left=" + iLeft;
	var oWin = editorArea.frameWindow.open(url, "GeckoModalDialog", sOption, true);
	oWin.resizeTo(width, height);
	oWin.focus();
	editorArea.frameWindow.dialogArguments = {
		"Win": window,
		"EditorID": eID,
		"Cmd": cmd
	};
	if ( !! para) {
		for (var index in para) {
			editorArea.frameWindow.dialogArguments[index] = para[index];
		}
	}
}
function fillGeckoImage(eID, url, cssText, paraArr) {
	var img = editorHash[eID].editorArea.frameWindow.document.createElement("img");
	img.style.cssText = ( !! cssText ? cssText: "");
	for (var pName in paraArr) {
		img.setAttribute(pName, paraArr[pName]);
	}
	img.src = url;
	editorHash[eID].editorArea.insertNodeAtSelection(img);
	return img;
}
function toCountFont(eID, type) {
	clearTimeout(window._cF);
	if (type == "text") countFont(eID);
	else window._cF = window.setTimeout(function() {
		countFont(eID);
	},
	500);
}
function countFont(eID) {
	var l = editorHash[eID].getUBB().getLength();
	if (l > (_fontCount)) {
		editorHash[eID].fontLimit = true;
		editorHash[eID].msgbox('<font color="red">您输入的文字超出<b>' + (l - _fontCount) + '</b>字符,请您进行适当删减后再进行发表。</font>');
	}
	if (editorHash[eID].fontLimit && l <= _fontCount) {
		editorHash[eID].fontLimit = false;
		editorHash[eID].hiddenMsgbox();
	}
}
function defaultSize(eID, id) {
	var img = editorHash[eID].editorArea.Document.getElementById(id);
	if (img) {
		img.removeAttribute("width");
		img.removeAttribute("height");
		if ( !! img.originHeight && !!img.originWidth) {
			img.style.width = img.originWidth;
			img.style.height = img.originHeight;
		} else {
			img.style.width = img.style.height = "auto";
		}
		if (FBrowser.isIE) editorHash[eID].editorArea.selectNode(img, "control");
		getCommandState(eID);
	}
}

var qzEditorLoaded = true;
/*  |xGv00|32aa2ff12b2c78346e650c9ded993e43 */